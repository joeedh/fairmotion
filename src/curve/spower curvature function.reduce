off factor;
off period;

qsteps := 355;
procedure quadriture(seq, u, val);
    for i:= 0:qsteps-1 sum 
        sub(u=(val/qsteps)*i, seq)/qsteps
    ;

procedure taylorcoeff(f, n, expvar, start);
    (sub(expvar=start, df(f, expvar, n))/(factorial(n)));

procedure chain(x, n1, limit);
    if (n1 = limit) then x
    else chain(x, n1-1, limit)*(x-(n1-limit));

sfac := (1.0-u)*u;
    
procedure binomial(n, k);
    factorial(n) / (factorial(k)*factorial(n-k));
    
procedure hik(i, k);
    if i = k then {1, 0} else 
    {binomial(2*k-i-1, k-i), -binomial(2*k-i-1, k-i-1)};
    
procedure ak(k, ef1, sf1, expvar);
    for i := 0:k sum taylorcoeff(sf1, i, expvar, 0)*part(hik(i,k), 1) + 
                     taylorcoeff(ef1, i, expvar, 0)*part(hik(i,k), 2);


procedure sps(seq, expvar, terms);
    for i2 := 0:terms sum 
        ak(i2, sub(expvar=1.0-expvar, seq), seq, expvar)*sub(u=s, sfac)**i2*(1.0-s) +
        ak(i2, seq, sub(expvar=1.0-expvar, seq), expvar)*sub(u=1.0-s, sfac)**i2*s;
        
f := sps(cos(k1 + (k2 - k1)*s), s, 0);

f := sps(sin(s), s, 8); sub(s=0.0, f); sin(0.0);
f := sps(sin(s), s, 8); sub(s=0.35, f); sin(0.35);
f := sps(sin(s), s, 8); sub(s=1.0, f); sin(1.0);
f := sps(sin(s), s, 8); sub(s=3.14159, f); sin(3.14159);

on factor
operator poly, dpoly1, dpoly2, dpoly3;

let poly(0.0) = k1;
let poly(1.0) = k2;
forall s let df(poly(s), s) = dpoly1(s);
forall s let df(dpoly1(s), s) = dpoly2(s);
forall s let df(dpoly2(s), s) = dpoly3(s);

let dpoly1(0) = dv1_k1;
let dpoly1(1) = dv1_k2;

let dpoly2(0) = dv2_k1;
let dpoly2(1) = dv2_k2;

let dpoly3(0) = dv3_k1;
let dpoly3(1) = dv3_k2;

c1  := sps(poly(s), s, 0);
t1 := int(c1, s);
d1 := df(c1, s);

c2  := sps(poly(s), s, 1);
t2 := int(c2, s);
d2 := df(c2, s);

c3  := sps(poly(s), s, 2);
t3 := int(c3, s);
d3 := df(c3, s);

on factor;
off rounded;
