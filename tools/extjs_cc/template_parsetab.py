
# template_parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'template_validateleftCOMMAleftASSIGNASSIGNLSHIFTASSIGNRSHIFTASSIGNPLUSASSIGNMINUSASSIGNDIVIDEASSIGNTIMESASSIGNBORASSIGNBANDASSIGNBXORASSIGNMODleftQESTCOLONleftARROWleftBNEGATEleftDOUBLEQleftLORleftLANDleftBORleftBXORleftBANDnonassocLTHANGTHANEQUALGTHANEQNOTEQUAL_STRICTEQUAL_STRICTLTHANEQNOTEQUALleftINSTANCEOFleftINleftLSHIFTRSHIFTLLSHIFTRRSHIFTleftPLUSMINUSleftTIMESDIVIDEleftEXPONENTrightUMINUSrightVAR_TYPE_PRECrightBITINVrightNOTrightTYPEOFleftLPARENleftLSBRACKETleftDECINCleftNEWleftDOTCOND_DOTALL ARROW ARROWPARENS ARROW_PRE ASSIGN ASSIGNBAND ASSIGNBOR ASSIGNBXOR ASSIGNDIVIDE ASSIGNLLSHIFT ASSIGNLSHIFT ASSIGNMINUS ASSIGNMOD ASSIGNPLUS ASSIGNRRSHIFT ASSIGNRSHIFT ASSIGNTIMES AWAIT BACKSLASH BAND BITINV BNEGATE BOR BREAK BXOR BYTE CASE CATCH CHAR CLASS CLASS_PROP_PRE CLASS_PROP_PRIVATE CLASS_PROP_PUBLIC CLOSECOM COLON COMMA COMMENT COND_DOT CONST CONTINUE DEC DEFAULT DELETE DIVIDE DO DOT DOUBLE DOUBLEQ ELSE EMPTYLINE ENUM EQUAL EQUAL_STRICT EXPONENT EXPORT EXTENDS FINALLY FOR FROM FUNCTION GET GLOBAL GTHAN GTHANEQ HASH ID ID_COLON IF IMPORT IN INC INFERRED INSTANCEOF INTERFACE LAND LBRACKET LET LLSHIFT LOR LPAREN LSBRACKET LSHIFT LTHAN LTHANEQ MINUS MLSTRLIT MOD NATIVE NEW NOT NOTEQUAL NOTEQUAL_STRICT NUMBER OF OPENCOM PLUS QEST RBRACKET REGEXPR RETURN RPAREN RRSHIFT RSBRACKET RSHIFT SEMI SET SHORT SIGNED SLASHR STATIC STRINGLIT SWITCH TEMPLATE_STR TGTHAN THROW TIMES TLTHAN TRIPLEDOT TRY TYPED TYPEOF VAR VARIABLE VAR_TYPE_PREC WHILE WITH YIELD newline statementlist : statement\n                    | statement_nonctrl\n                    | statementlist statement\n                    | statementlist statement_nonctrl \n                    | \n   push_scope :\n   pop_scope :\n   opt_colon_type : COLON var_type\n                     |\n  assign_statement : assign COLON var_type\n                      |\n  bracketed_statementlist : LBRACKET statementlist RBRACKET statement : function\n                | class\n                | interface\n                | typed_class\n                | enum\n                | if\n                | else\n                | while\n                | with\n                | dowhile\n                | for\n                | return SEMI\n                | yield SEMI\n                | break SEMI\n                | continue SEMI\n                | throw SEMI\n                | try\n                | catch\n                | finally\n                | switch\n                | func_native SEMI\n                | import_decl\n                | export_decl\n                | bracketed_statementlist\n                | dynamic_import\n  \n  dynamic_import : IMPORT LPAREN expr RPAREN\n  import_decl : IMPORT import_clause from_clause SEMI\n                 | IMPORT module_spec SEMI\n  import_clause : import_def_bind\n                   | name_space_import\n                   | named_imports\n                   | import_def_bind COMMA name_space_import\n                   | import_def_bind COMMA named_imports\n  import_def_bind : import_bind\n  name_space_import : TIMES ID import_bind named_imports : LBRACKET RBRACKET\n                    | LBRACKET import_list RBRACKET\n   from_clause : FROM module_spec import_list : import_spec\n                  | import_list COMMA import_spec\n  \n      import_spec : import_bind\n                  | import_bind ID import_bind\n   import_bind : binding_ident\n   module_spec : STRINGLIT\n   binding_ident : id\n   statement_nonctrl : expr SEMI\n                        | var_decl SEMI\n                        | funcref SEMI\n                        | SEMI\n                        | if\n                        | else\n                        | for\n                        | dowhile\n                        | while\n                        | return SEMI\n                        | yield SEMI\n                        | break SEMI\n                        | continue SEMI\n                        | throw SEMI\n                        | try\n                        | catch\n                        | finally\n                        | delete SEMI\n   var_decl_or_type : var_decl\n                       | var_type\n  \n    templatedeflist : var_type\n             | var_type ASSIGN var_type\n             | templatedeflist COMMA var_type\n             | templatedeflist COMMA var_type ASSIGN var_type\n  template : lthan_restrict templatedeflist gthan_restrict\n  type_modifiers : type_modifiers SIGNED\n                    | type_modifiers CONST\n                    | GLOBAL\n                    | VAR\n                    | CONST\n                    | LET\n                    | STATIC\n  left_id : id  id_opt : id\n             |\n  template_ref : lthan_restrict simple_templatedeflist gthan_restrict\n  template_ref_validate : lthan_restrict simple_templatedeflist gthan_restrict\n  template_validate : template\n                       | template_ref_validate\n  lthan_restrict : TLTHAN \n  gthan_restrict : TGTHAN \n  id_1 : id\n  var_decl_no_list : var_type\n                      | type_modifiers var_decl_no_list\n                      | var_decl_no_list ASSIGN expr\n  typescript_var_decl : ID\n                         | ID_COLON var_type\n  var_decl : type_modifiers var_type\n              | type_modifiers var_expand\n              | var_decl ASSIGN expr\n              | var_decl COMMA id\n              | var_decl COMMA id ASSIGN expr\n  ident_arr : id\n               | ident_arr LSBRACKET NUMBER RSBRACKET\n  var_decl_with_arr : type_modifiers var_type ident_arr\n                       | var_decl_with_arr ASSIGN expr\n                       | var_decl_with_arr COMMA ident_arr\n                       | var_decl_with_arr COMMA ident_arr ASSIGN expr\n  id_var_type : id \n  id_var_decl : id \n  empty : empty\n           |\n  var_fancy_list : id\n                    | var_fancy_list COMMA id\n  var_fancy_array : LSBRACKET var_fancy_list RSBRACKETvar_fancy_object : LBRACKET var_fancy_list RBRACKETvar_expand : var_fancy_array\n                | var_fancy_object\n   var_type_simple : id_var_type\n                      | SHORT\n                      | DOUBLE\n                      | CHAR\n                      | BYTE\n                      | INFERRED\n                      | var_type_simple template_ref\n   var_type : var_type id_var_type\n               | id_var_type\n               | SHORT\n               | DOUBLE\n               | CHAR\n               | BYTE\n               | INFERRED\n               | var_type template_ref\n  typeof_opt : TYPEOF\n                |\n  \n    simple_templatedeflist : typeof_opt var_type\n                           | simple_templatedeflist COMMA typeof_opt var_type\n  simple_var_decl : VAR id\n                     | LET id\n                     | id\n  cmplx_assign : ASSIGNPLUS \n                  | ASSIGNMINUS \n                  | ASSIGNDIVIDE \n                  | ASSIGNTIMES\n                  | ASSIGNMOD\n                  | ASSIGNBOR \n                  | ASSIGNBAND \n                  | ASSIGNBXOR \n                  | ASSIGNLSHIFT\n                  | ASSIGNRSHIFT\n                  | ASSIGNRRSHIFT\n                  | ASSIGNLLSHIFT\n                  | ASSIGN\n   throw : THROW expr assign : expr cmplx_assign expr \n             | assign cmplx_assign expr\n             | expr\n             \n  exprlist : expr\n  typed_class : TYPED CLASS id template_opt typed_class_tail\n    typed_class_tail : typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET\n  typed_class_body_opt : typed_class_list\n                          |\n  typed_class_list : typed_class_element\n                      | typed_class_list typed_class_element\n  typed_class_element : class_element\n                         | var_decl_with_arr SEMI\n  typed_inherit_opt : EXTENDS id\n                       |\n  enum : ENUM ID LBRACKET enum_body RBRACKETenum_body : enum_memberlist comma_opt\n                 |\n    enum_memberlist : enum_member\n                       | enum_memberlist COMMA enum_member\n    enum_member : id_no_enum\n                   | id_no_enum ASSIGN expr_no_list\n    iface_extends : EXTENDS id\n                   | iface_extends COMMA id\n                   |\n   iface_method : push_scope id template_opt LPAREN funcdeflist RPAREN func_type_opt SEMI\n  \n    iface_item : typescript_class_property\n               | iface_method\n\n  iface_body : iface_item\n                | iface_body iface_item\n                |\n  iface_tail : LBRACKET iface_body RBRACKETinterface : INTERFACE id iface_extends iface_tailclass : CLASS id template_opt class_tailexprclass : CLASS id template_opt class_tailclass_tail : class_heritage_opt LBRACKET class_body_opt RBRACKETclass_parent_id : var_type\n                     | class_parent_id DOT var_type\n  dot_expr : id\n              | id DOT dot_expr\n  class_parent_call : dot_expr func_call\n                       | dot_expr\n  class_list : class_parent_id\n                | class_parent_call\n                | class_list COMMA class_parent_id\n  class_heritage : EXTENDS class_listclass_heritage_opt : class_heritage\n                        | \n  class_body_opt : class_element_list\n                    |\n  class_element_list : class_element\n                        | class_element_list class_element\n  class_element : method_def\n                   | typescript_class_property\n  prefix_opt : STATIC\n                | GET\n                | SET\n                |\n  id_right : id %prec UMINUS\n   property_id : ID\n                  | HASH ID\n                  | GET\n                  | SET\n                  | DELETE\n                  | FOR\n                  | WHILE\n                  | CATCH\n                  | TRY\n                  | THROW\n                  | DO\n                  | FINALLY\n                  | NUMBER\n                  | IF\n                  | ENUM\n                  | ELSE\n                  | VAR\n                  | CONST\n                  | LET\n                  | STATIC\n                  | YIELD\n                  | FUNCTION\n                  | RETURN\n                  | LSBRACKET expr RSBRACKET\n  property_id_right : property_id %prec UMINUS\n  property_id_opt : property_id property_id\n                       | property_id\n    star_opt : TIMES\n              |\n  method : star_opt property_id_opt LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET\n  getset_id : property_id\n               | NUMBER\n  method_def : method\n  method_def_error : method error\n  static : STATIC cls_prefix : STATIC\n                 | CLASS_PROP_PRIVATE\n                 | CLASS_PROP_PUBLIC\n  cls_prefix_opt : cls_prefix\n                    |\n  prop_id_vartype_opt : ID_COLON COLON var_type\n                         | ID\n  typescript_class_property : CLASS_PROP_PRE cls_prefix_opt prop_id_vartype_opt ASSIGN expr_for_arraylit SEMI\n                                 | CLASS_PROP_PRE cls_prefix_opt ID_COLON COLON var_type SEMI\n    \n    var_element : id %prec VAR_TYPE_PREC\n                | SHORT %prec VAR_TYPE_PREC\n                | DOUBLE %prec VAR_TYPE_PREC\n                | CHAR %prec VAR_TYPE_PREC\n                | BYTE %prec VAR_TYPE_PREC\n                | id template_ref %prec VAR_TYPE_PREC\n  \n      var_type2 : var_element\n             \n  class_property : var_type2 id\n                    | class_property ASSIGN expr\n                    | class_property COMMA id\n                    | class_property COMMA id ASSIGN expr\n  \n    setter_param_list : var_type_opt id\n                      | var_type\n  template_ref_opt : template_ref\n                      |\n   func_call : template_ref_opt LPAREN exprlist RPAREN\n                 | template_ref_opt LPAREN TRIPLEDOT binding_ident RPAREN\n                 | template_ref_opt LPAREN expr COMMA TRIPLEDOT binding_ident RPAREN\n                 | template_ref_opt LPAREN RPAREN\n  \n    funcdeflist : var_decl_no_list\n                | funcdeflist COMMA var_decl_no_list\n                | typed_argument\n                | funcdeflist COMMA typed_argument\n                |\n  template_opt : template\n                  |\n   func_type_opt : COLON var_type_opt \n                    |\n   funcref : FUNCTION star_opt id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt\n   func_native : NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt\n   function : FUNCTION star_opt id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET\n  lbracket_restrict : LBRACKETrbracket_restrict : RBRACKETvar_type_opt : var_type\n                  |\n   colon_opt : COLON\n                |\n   func_name_opt : ID\n                    | SET\n                    | GET\n                    | SHORT\n                    | DOUBLE\n                    | TYPED\n                    |\n   func_name     : ID\n                    | SET\n                    | GET\n                    | SHORT\n                    | DOUBLE\n                    | TYPED\n   exprfunction : FUNCTION star_opt func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict\n                   | FUNCTION star_opt func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict\n  comma_opt : COMMA\n               |\n  expr_for_arraylit : expr_no_list\n                       | obj_literal\n  arraylist : expr_for_arraylit\n               | arraylist expr_for_arraylit\n               | arraylist arrow_function\n               | arraylist COMMA\n  array_literal : LSBRACKET arraylist RSBRACKET\n                   | LSBRACKET RSBRACKET\n  id_str_or_num : id\n               | NUMBER\n               | STRINGLIT\n  typeof : TYPEOF expr\n  typeof_no_list : TYPEOF expr_no_list\n  \n      objlit_key : id_str_or_num\n                 | ID_COLON\n                 | NEW\n                 | CATCH\n                 | TRY\n                 | FINALLY\n                 | THROW\n                 | LSBRACKET expr RSBRACKET\n                 | CLASS_PROP_PRE objlit_key\n    \n    obj_lit_list : objlit_key COLON expr\n                 | id\n                 | objlit_function\n                 | obj_lit_list COMMA objlit_function\n                 | obj_lit_list COMMA objlit_key COLON expr\n                 | obj_lit_list COMMA id\n                 | obj_lit_list COMMA\n  obj_literal : lbracket_restrict push_scope obj_lit_list rbracket_restrict\n                    | lbracket_restrict rbracket_restrict\n  star_opt_2 : \n                 | TIMES\n   objlit_function : TIMES func_name LPAREN funcdeflist RPAREN lbracket_restrict statementlist_opt rbracket_restrict\n                      | func_name LPAREN funcdeflist RPAREN lbracket_restrict statementlist_opt rbracket_restrict\n                      | GET func_name LPAREN funcdeflist RPAREN lbracket_restrict statementlist_opt rbracket_restrict\n                      | SET func_name LPAREN funcdeflist RPAREN lbracket_restrict statementlist_opt rbracket_restrict\n  delete : DELETE expr\n  new : NEW expr\n  new_no_list : NEW expr_no_list\n  inc_no_list : expr_no_list INC\n                 | INC expr_no_list\n  dec : expr DEC\n         | DEC expr\n  not : NOT exprinc : expr INC\n         | INC expr\n  dec_no_list : expr_no_list DEC\n                 | DEC expr_no_list\n  not_no_list : NOT expr_no_listbitinv_no_list : BITINV expr_no_listbitinv : BITINV exprstrlit : STRINGLIT lparen_restrict : LPAREN\n   rparen_restrict : RPAREN\n   lsbracket_restrict : LSBRACKET\n   rsbracket_restrict : RSBRACKET\n  concise_body : expr_no_list\n                  | LBRACKET statementlist_opt RBRACKET\n                    \n  id_colon2 : ID_COLON\n               | id\n               | CLASS_PROP_PRE ID_COLON\n  \n  typed_argument : id_colon2\n                 | id_colon2 COLON var_type\n                 | id_colon2 COLON FUNCTION\n                 | id_colon2 COLON var_type ASSIGN expr_for_arraylit\n                 | id_colon2 COLON FUNCTION ASSIGN expr_for_arraylit\n                 | id_colon2 ASSIGN expr_for_arraylit\n  arrowparamlist_opt : typed_argument\n                        | arrowparamlist_opt COMMA typed_argument\n                        |\n  \n    arrow_function : ARROW_PRE arrowparamlist_opt RPAREN ARROW concise_body\n                   | ARROW_PRE arrowparamlist_opt RPAREN COLON var_type ARROW concise_body\n                   | ID ARROW concise_body\n  id_colon : ID_COLONmember_name : ID\n                 | HASH ID\n                 | NEW\n                 | TRY\n                 | DELETE\n                 | FINALLY\n                 | THROW\n                 | RETURN\n                 | CATCHexpr : NUMBER\n            | strlit\n            | id\n            | id_colon\n            | id template_ref\n            | template_ref\n            | array_literal\n            | arrow_function\n            | exprfunction\n            | exprclass\n            | obj_literal\n            | dynamic_import\n            | expr cmplx_assign expr\n            | expr cmplx_assign expr COLON var_type SEMI\n            | expr RSHIFT expr\n            | expr LSHIFT expr\n            | expr EXPONENT expr\n            | expr DOUBLEQ expr\n            | expr LLSHIFT expr\n            | expr RRSHIFT expr\n            | expr COND_DOT expr\n            | expr DOT expr\n            | expr DOT member_name\n            | expr DOT DELETE\n            | expr DOT DEFAULT\n            | expr LAND expr\n            | expr LOR expr\n            | expr BOR expr\n            | expr INSTANCEOF expr\n            | expr BXOR expr\n            | expr BAND expr\n            | expr EQUAL expr\n            | expr EQUAL_STRICT expr\n            | expr NOTEQUAL_STRICT expr\n            | expr GTHAN expr\n            | expr GTHANEQ expr\n            | expr LTHAN expr\n            | expr MOD expr\n            | expr LTHANEQ expr\n            | expr NOTEQUAL expr\n            | expr PLUS expr\n            | expr MINUS expr\n            | expr DIVIDE expr\n            | expr TIMES expr\n            | expr IN expr\n            | expr func_call\n            | expr lsbracket_restrict expr rsbracket_restrict\n            | expr QEST expr COLON expr\n            | expr COMMA expr\n            | lparen_restrict expr rparen_restrict\n            | expr_uminus\n            | expr_uplus\n            | not\n            | bitinv\n            | new\n            | inc\n            | dec\n            | typeof\n            | re_lit\n    expr_no_list : NUMBER\n            | strlit\n            | id\n            | id_colon\n            | array_literal\n            | exprfunction\n            | exprclass\n            | dynamic_import\n            | expr_no_list cmplx_assign expr_no_list\n            | expr_no_list RSHIFT expr_no_list\n            | expr_no_list LSHIFT expr_no_list\n            | expr_no_list LLSHIFT expr_no_list\n            | expr_no_list RRSHIFT expr_no_list\n            | expr_no_list COND_DOT expr_no_list\n            | expr_no_list DOT expr_no_list\n            | expr_no_list EXPONENT expr_no_list\n            | expr_no_list LAND expr_no_list\n            | expr_no_list LOR expr_no_list\n            | expr_no_list BOR expr_no_list\n            | expr_no_list INSTANCEOF expr_no_list\n            | expr_no_list BXOR expr_no_list\n            | expr_no_list BAND expr_no_list\n            | expr_no_list EQUAL expr_no_list\n            | expr_no_list EQUAL_STRICT expr_no_list\n            | expr_no_list NOTEQUAL_STRICT expr_no_list\n            | expr_no_list GTHAN expr_no_list\n            | expr_no_list GTHANEQ expr_no_list\n            | expr_no_list LTHAN expr_no_list\n            | expr_no_list MOD expr_no_list\n            | expr_no_list LTHANEQ expr_no_list\n            | expr_no_list NOTEQUAL expr_no_list\n            | expr_no_list PLUS expr_no_list\n            | expr_no_list MINUS expr_no_list\n            | expr_no_list DIVIDE expr_no_list\n            | expr_no_list TIMES expr_no_list\n            | expr_no_list IN expr_no_list\n            | expr_no_list func_call\n            | expr_no_list lsbracket_restrict expr rsbracket_restrict\n            | expr_no_list QEST expr_no_list COLON expr_no_list\n            | lparen_restrict expr rparen_restrict\n            | expr_no_list_uminus\n            | expr_no_list_uplus\n            | not_no_list\n            | bitinv_no_list\n            | new_no_list\n            | inc_no_list\n            | dec_no_list\n            | typeof_no_list\n            | re_lit\n    expr_uplus : PLUS expr %prec UMINUS\n    expr_no_list_uplus : PLUS expr_no_list %prec UMINUS\n    expr_uminus : MINUS expr %prec UMINUS\n    expr_no_list_uminus : MINUS expr_no_list %prec UMINUS\n    paren_expr : LPAREN expr RPAREN\n                | LPAREN RPAREN\n  assign_opt : assign\n                 |\n  expr_opt : expr\n              |\n  re_lit : REGEXPR\n  \n    simple_var_decl_strict : VAR id\n                           | LET id\n  for_var_decl : expr_opt\n                  | simple_var_decl_strict\n                  | simple_var_decl_strict ASSIGN expr\n  in_or_of : IN\n              | OF\n  \n  for_of_expand : type_modifiers var_expand OF expr\n  \n    for_decl : for_var_decl SEMI expr_opt SEMI expr_opt\n             | id in_or_of expr\n             | simple_var_decl in_or_of expr\n             | for_of_expand\n  loop_label_opt : \n                    | ID_COLON COLON\n  for : loop_label_opt FOR LPAREN for_decl RPAREN statement_nonctrl\n         | loop_label_opt FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET\n   ctrl_statement : statement_nonctrl\n                     | LBRACKET statementlist_opt RBRACKET\n                     | SEMI\n  dowhile : loop_label_opt DO ctrl_statement WHILE paren_expr\n  while : loop_label_opt WHILE paren_expr statement_nonctrl\n           | loop_label_opt WHILE paren_expr LBRACKET statementlist_opt RBRACKET\n  default_case : DEFAULT COLON statementlist\n  statementlist_opt : statementlist\n                       |\n  case_clause : CASE expr COLON statementlist_opt\n  case_clauses : case_clause\n                  | case_clauses case_clause\n  case_clauses_opt : case_clauses\n                      |\n  case_block : case_clauses\n                | case_clauses_opt default_case case_clauses_opt\n  switch : SWITCH paren_expr LBRACKET case_block RBRACKET\n  with : WITH paren_expr ctrl_statement\n  if : IF paren_expr ctrl_statement\n  try : TRY statement_nonctrl\n         | TRY LBRACKET statementlist RBRACKET\n         | TRY LBRACKET RBRACKET\n  finally : FINALLY  LBRACKET statementlist_opt RBRACKET\n  export_decl : EXPORT TIMES from_clause SEMI\n                 | EXPORT export_clause from_clause SEMI\n                 | EXPORT export_clause SEMI\n                 | EXPORT var_decl SEMI\n                 | EXPORT function\n                 | EXPORT class\n                 | EXPORT interface\n                 | EXPORT enum\n                 | EXPORT DEFAULT function\n                 | EXPORT DEFAULT enum\n                 | EXPORT DEFAULT class\n                 | EXPORT DEFAULT assign\n  export_clause : LBRACKET RBRACKET\n                   | LBRACKET exports_list RBRACKET\n                   | LBRACKET exports_list COMMA RBRACKET\n   exports_list : export_spec\n                   | exports_list COMMA export_spec\n   export_spec : ID\n                  | ID ID ID\n  catch_tok : CATCHcatch : catch_tok paren_expr statement_nonctrl\n           | catch_tok paren_expr LBRACKET statementlist RBRACKET\n  else : ELSE ctrl_statement\n  break : BREAK \n           | BREAK ID\n  continue : CONTINUE \n              | CONTINUE ID\n  return : RETURN expr\n            | RETURN\n  yield : YIELD expr\n            | YIELD id_no_enum : ID\n                 | GET\n                 | SET\n                 | STATIC\n                 | CATCH\n                 | GLOBAL\n                 | AWAIT\n                 | FROM\n   id : ID\n         | GET\n         | SET\n         | STATIC\n         | CATCH\n         | GLOBAL\n         | CHAR\n         | AWAIT\n         | FROM\n         | ENUM\n  error_push :\n    error_pop :\n    '
    
_lr_action_items = {'TLTHAN':([0,8,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,29,33,34,36,37,38,40,43,44,45,],[5,5,-134,-135,-136,-137,-138,-139,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,-98,-133,-140,-605,5,5,5,5,-93,5,]),'$end':([1,2,3,27,29,30,],[0,-95,-96,-82,-98,-94,]),'SHORT':([4,5,9,16,28,31,32,35,39,42,],[11,-97,11,-141,11,-142,11,-142,11,11,]),'DOUBLE':([4,5,9,16,28,31,32,35,39,42,],[12,-97,12,-141,12,-142,12,-142,12,12,]),'CHAR':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[13,-97,36,13,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,13,-98,-142,13,-133,-140,-142,-605,36,36,13,36,13,36,-93,36,]),'BYTE':([4,5,9,16,28,31,32,35,39,42,],[14,-97,14,-141,14,-142,14,-142,14,14,]),'INFERRED':([4,5,9,16,28,31,32,35,39,42,],[15,-97,15,-141,15,-142,15,-142,15,15,]),'TYPEOF':([4,5,31,35,],[16,-97,16,16,]),'ID':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[18,-97,18,18,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,18,-98,-142,18,-133,-140,-142,-605,18,18,18,18,18,18,-93,18,]),'GET':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[19,-97,19,19,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,19,-98,-142,19,-133,-140,-142,-605,19,19,19,19,19,19,-93,19,]),'SET':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[20,-97,20,20,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,20,-98,-142,20,-133,-140,-142,-605,20,20,20,20,20,20,-93,20,]),'STATIC':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[21,-97,21,21,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,21,-98,-142,21,-133,-140,-142,-605,21,21,21,21,21,21,-93,21,]),'CATCH':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[22,-97,22,22,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,22,-98,-142,22,-133,-140,-142,-605,22,22,22,22,22,22,-93,22,]),'GLOBAL':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[23,-97,23,23,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,23,-98,-142,23,-133,-140,-142,-605,23,23,23,23,23,23,-93,23,]),'AWAIT':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[24,-97,24,24,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,24,-98,-142,24,-133,-140,-142,-605,24,24,24,24,24,24,-93,24,]),'FROM':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[25,-97,25,25,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,25,-98,-142,25,-133,-140,-142,-605,25,25,25,25,25,25,-93,25,]),'ENUM':([4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,],[26,-97,26,26,-134,-135,-136,-137,-138,-139,-141,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,26,-98,-142,26,-133,-140,-142,-605,26,26,26,26,26,26,-93,26,]),'COMMA':([6,7,8,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,29,33,34,36,37,38,40,41,43,44,45,],[28,31,-78,-134,-135,-136,-137,-138,-139,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,-98,-133,-140,-605,-143,-80,-79,31,-144,-93,-81,]),'TGTHAN':([6,7,8,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,29,33,34,36,37,38,40,41,43,44,45,],[29,29,-78,-134,-135,-136,-137,-138,-139,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,-98,-133,-140,-605,-143,-80,-79,29,-144,-93,-81,]),'ASSIGN':([8,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,29,33,34,36,38,44,],[32,-134,-135,-136,-137,-138,-139,-116,-599,-600,-601,-602,-603,-604,-606,-607,-608,-98,-133,-140,-605,42,-93,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'template_validate':([0,],[1,]),'template':([0,],[2,]),'template_ref_validate':([0,],[3,]),'lthan_restrict':([0,8,37,38,40,43,45,],[4,35,35,35,35,35,35,]),'templatedeflist':([4,],[6,]),'simple_templatedeflist':([4,35,],[7,41,]),'var_type':([4,9,28,32,39,42,],[8,37,38,40,43,45,]),'typeof_opt':([4,31,35,],[9,39,9,]),'id_var_type':([4,8,9,28,32,37,38,39,40,42,43,45,],[10,33,10,10,10,33,33,10,33,10,33,33,]),'id':([4,8,9,28,32,37,38,39,40,42,43,45,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'gthan_restrict':([6,7,41,],[27,30,44,]),'template_ref':([8,37,38,40,43,45,],[34,34,34,34,34,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> template_validate","S'",1,None,None,None),
  ('statementlist -> statement','statementlist',1,'p_statementlist','js_parse.py',390),
  ('statementlist -> statement_nonctrl','statementlist',1,'p_statementlist','js_parse.py',391),
  ('statementlist -> statementlist statement','statementlist',2,'p_statementlist','js_parse.py',392),
  ('statementlist -> statementlist statement_nonctrl','statementlist',2,'p_statementlist','js_parse.py',393),
  ('statementlist -> <empty>','statementlist',0,'p_statementlist','js_parse.py',394),
  ('push_scope -> <empty>','push_scope',0,'p_push_scope','js_parse.py',415),
  ('pop_scope -> <empty>','pop_scope',0,'p_pop_scope','js_parse.py',421),
  ('opt_colon_type -> COLON var_type','opt_colon_type',2,'p_opt_colon_type','js_parse.py',427),
  ('opt_colon_type -> <empty>','opt_colon_type',0,'p_opt_colon_type','js_parse.py',428),
  ('assign_statement -> assign COLON var_type','assign_statement',3,'p_assign_statement','js_parse.py',436),
  ('assign_statement -> <empty>','assign_statement',0,'p_assign_statement','js_parse.py',437),
  ('bracketed_statementlist -> LBRACKET statementlist RBRACKET','bracketed_statementlist',3,'p_bracketed_statementlist','js_parse.py',446),
  ('statement -> function','statement',1,'p_statement','js_parse.py',453),
  ('statement -> class','statement',1,'p_statement','js_parse.py',454),
  ('statement -> interface','statement',1,'p_statement','js_parse.py',455),
  ('statement -> typed_class','statement',1,'p_statement','js_parse.py',456),
  ('statement -> enum','statement',1,'p_statement','js_parse.py',457),
  ('statement -> if','statement',1,'p_statement','js_parse.py',458),
  ('statement -> else','statement',1,'p_statement','js_parse.py',459),
  ('statement -> while','statement',1,'p_statement','js_parse.py',460),
  ('statement -> with','statement',1,'p_statement','js_parse.py',461),
  ('statement -> dowhile','statement',1,'p_statement','js_parse.py',462),
  ('statement -> for','statement',1,'p_statement','js_parse.py',463),
  ('statement -> return SEMI','statement',2,'p_statement','js_parse.py',464),
  ('statement -> yield SEMI','statement',2,'p_statement','js_parse.py',465),
  ('statement -> break SEMI','statement',2,'p_statement','js_parse.py',466),
  ('statement -> continue SEMI','statement',2,'p_statement','js_parse.py',467),
  ('statement -> throw SEMI','statement',2,'p_statement','js_parse.py',468),
  ('statement -> try','statement',1,'p_statement','js_parse.py',469),
  ('statement -> catch','statement',1,'p_statement','js_parse.py',470),
  ('statement -> finally','statement',1,'p_statement','js_parse.py',471),
  ('statement -> switch','statement',1,'p_statement','js_parse.py',472),
  ('statement -> func_native SEMI','statement',2,'p_statement','js_parse.py',473),
  ('statement -> import_decl','statement',1,'p_statement','js_parse.py',474),
  ('statement -> export_decl','statement',1,'p_statement','js_parse.py',475),
  ('statement -> bracketed_statementlist','statement',1,'p_statement','js_parse.py',476),
  ('statement -> dynamic_import','statement',1,'p_statement','js_parse.py',477),
  ('dynamic_import -> IMPORT LPAREN expr RPAREN','dynamic_import',4,'p_dynamic_import','js_parse.py',491),
  ('import_decl -> IMPORT import_clause from_clause SEMI','import_decl',4,'p_import_decl','js_parse.py',497),
  ('import_decl -> IMPORT module_spec SEMI','import_decl',3,'p_import_decl','js_parse.py',498),
  ('import_clause -> import_def_bind','import_clause',1,'p_import_clause','js_parse.py',513),
  ('import_clause -> name_space_import','import_clause',1,'p_import_clause','js_parse.py',514),
  ('import_clause -> named_imports','import_clause',1,'p_import_clause','js_parse.py',515),
  ('import_clause -> import_def_bind COMMA name_space_import','import_clause',3,'p_import_clause','js_parse.py',516),
  ('import_clause -> import_def_bind COMMA named_imports','import_clause',3,'p_import_clause','js_parse.py',517),
  ('import_def_bind -> import_bind','import_def_bind',1,'p_import_def_bind','js_parse.py',539),
  ('name_space_import -> TIMES ID import_bind','name_space_import',3,'p_name_space_import','js_parse.py',551),
  ('named_imports -> LBRACKET RBRACKET','named_imports',2,'p_named_imports','js_parse.py',562),
  ('named_imports -> LBRACKET import_list RBRACKET','named_imports',3,'p_named_imports','js_parse.py',563),
  ('from_clause -> FROM module_spec','from_clause',2,'p_from_clause','js_parse.py',573),
  ('import_list -> import_spec','import_list',1,'p_import_list','js_parse.py',579),
  ('import_list -> import_list COMMA import_spec','import_list',3,'p_import_list','js_parse.py',580),
  ('import_spec -> import_bind','import_spec',1,'p_import_spec','js_parse.py',593),
  ('import_spec -> import_bind ID import_bind','import_spec',3,'p_import_spec','js_parse.py',594),
  ('import_bind -> binding_ident','import_bind',1,'p_import_bind','js_parse.py',610),
  ('module_spec -> STRINGLIT','module_spec',1,'p_module_spec','js_parse.py',615),
  ('binding_ident -> id','binding_ident',1,'p_binding_ident','js_parse.py',627),
  ('statement_nonctrl -> expr SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',651),
  ('statement_nonctrl -> var_decl SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',652),
  ('statement_nonctrl -> funcref SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',653),
  ('statement_nonctrl -> SEMI','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',654),
  ('statement_nonctrl -> if','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',655),
  ('statement_nonctrl -> else','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',656),
  ('statement_nonctrl -> for','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',657),
  ('statement_nonctrl -> dowhile','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',658),
  ('statement_nonctrl -> while','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',659),
  ('statement_nonctrl -> return SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',660),
  ('statement_nonctrl -> yield SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',661),
  ('statement_nonctrl -> break SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',662),
  ('statement_nonctrl -> continue SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',663),
  ('statement_nonctrl -> throw SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',664),
  ('statement_nonctrl -> try','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',665),
  ('statement_nonctrl -> catch','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',666),
  ('statement_nonctrl -> finally','statement_nonctrl',1,'p_statement_nonctrl','js_parse.py',667),
  ('statement_nonctrl -> delete SEMI','statement_nonctrl',2,'p_statement_nonctrl','js_parse.py',668),
  ('var_decl_or_type -> var_decl','var_decl_or_type',1,'p_var_decl_or_type','js_parse.py',697),
  ('var_decl_or_type -> var_type','var_decl_or_type',1,'p_var_decl_or_type','js_parse.py',698),
  ('templatedeflist -> var_type','templatedeflist',1,'p_templatedeflist','js_parse.py',706),
  ('templatedeflist -> var_type ASSIGN var_type','templatedeflist',3,'p_templatedeflist','js_parse.py',707),
  ('templatedeflist -> templatedeflist COMMA var_type','templatedeflist',3,'p_templatedeflist','js_parse.py',708),
  ('templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type','templatedeflist',5,'p_templatedeflist','js_parse.py',709),
  ('template -> lthan_restrict templatedeflist gthan_restrict','template',3,'p_template','js_parse.py',728),
  ('type_modifiers -> type_modifiers SIGNED','type_modifiers',2,'p_type_modifiers','js_parse.py',735),
  ('type_modifiers -> type_modifiers CONST','type_modifiers',2,'p_type_modifiers','js_parse.py',736),
  ('type_modifiers -> GLOBAL','type_modifiers',1,'p_type_modifiers','js_parse.py',737),
  ('type_modifiers -> VAR','type_modifiers',1,'p_type_modifiers','js_parse.py',738),
  ('type_modifiers -> CONST','type_modifiers',1,'p_type_modifiers','js_parse.py',739),
  ('type_modifiers -> LET','type_modifiers',1,'p_type_modifiers','js_parse.py',740),
  ('type_modifiers -> STATIC','type_modifiers',1,'p_type_modifiers','js_parse.py',741),
  ('left_id -> id','left_id',1,'p_left_id','js_parse.py',759),
  ('id_opt -> id','id_opt',1,'p_id_opt','js_parse.py',763),
  ('id_opt -> <empty>','id_opt',0,'p_id_opt','js_parse.py',764),
  ('template_ref -> lthan_restrict simple_templatedeflist gthan_restrict','template_ref',3,'p_template_ref','js_parse.py',771),
  ('template_ref_validate -> lthan_restrict simple_templatedeflist gthan_restrict','template_ref_validate',3,'p_template_ref_validate','js_parse.py',778),
  ('template_validate -> template','template_validate',1,'p_template_validate','js_parse.py',786),
  ('template_validate -> template_ref_validate','template_validate',1,'p_template_validate','js_parse.py',787),
  ('lthan_restrict -> TLTHAN','lthan_restrict',1,'p_lthan_restrict','js_parse.py',795),
  ('gthan_restrict -> TGTHAN','gthan_restrict',1,'p_gthan_restrict','js_parse.py',811),
  ('id_1 -> id','id_1',1,'p_id1','js_parse.py',819),
  ('var_decl_no_list -> var_type','var_decl_no_list',1,'p_var_decl_no_list','js_parse.py',825),
  ('var_decl_no_list -> type_modifiers var_decl_no_list','var_decl_no_list',2,'p_var_decl_no_list','js_parse.py',826),
  ('var_decl_no_list -> var_decl_no_list ASSIGN expr','var_decl_no_list',3,'p_var_decl_no_list','js_parse.py',827),
  ('typescript_var_decl -> ID','typescript_var_decl',1,'p_typescript_var_decl','js_parse.py',876),
  ('typescript_var_decl -> ID_COLON var_type','typescript_var_decl',2,'p_typescript_var_decl','js_parse.py',877),
  ('var_decl -> type_modifiers var_type','var_decl',2,'p_var_decl','js_parse.py',894),
  ('var_decl -> type_modifiers var_expand','var_decl',2,'p_var_decl','js_parse.py',895),
  ('var_decl -> var_decl ASSIGN expr','var_decl',3,'p_var_decl','js_parse.py',896),
  ('var_decl -> var_decl COMMA id','var_decl',3,'p_var_decl','js_parse.py',897),
  ('var_decl -> var_decl COMMA id ASSIGN expr','var_decl',5,'p_var_decl','js_parse.py',898),
  ('ident_arr -> id','ident_arr',1,'p_ident_arr','js_parse.py',1004),
  ('ident_arr -> ident_arr LSBRACKET NUMBER RSBRACKET','ident_arr',4,'p_ident_arr','js_parse.py',1005),
  ('var_decl_with_arr -> type_modifiers var_type ident_arr','var_decl_with_arr',3,'p_var_decl_with_arr','js_parse.py',1015),
  ('var_decl_with_arr -> var_decl_with_arr ASSIGN expr','var_decl_with_arr',3,'p_var_decl_with_arr','js_parse.py',1016),
  ('var_decl_with_arr -> var_decl_with_arr COMMA ident_arr','var_decl_with_arr',3,'p_var_decl_with_arr','js_parse.py',1017),
  ('var_decl_with_arr -> var_decl_with_arr COMMA ident_arr ASSIGN expr','var_decl_with_arr',5,'p_var_decl_with_arr','js_parse.py',1018),
  ('id_var_type -> id','id_var_type',1,'p_id_var_type','js_parse.py',1075),
  ('id_var_decl -> id','id_var_decl',1,'p_id_var_decl','js_parse.py',1081),
  ('empty -> empty','empty',1,'p_empty','js_parse.py',1087),
  ('empty -> <empty>','empty',0,'p_empty','js_parse.py',1088),
  ('var_fancy_list -> id','var_fancy_list',1,'p_var_fancy_list','js_parse.py',1093),
  ('var_fancy_list -> var_fancy_list COMMA id','var_fancy_list',3,'p_var_fancy_list','js_parse.py',1094),
  ('var_fancy_array -> LSBRACKET var_fancy_list RSBRACKET','var_fancy_array',3,'p_var_fancy_array','js_parse.py',1108),
  ('var_fancy_object -> LBRACKET var_fancy_list RBRACKET','var_fancy_object',3,'p_var_fancy_object','js_parse.py',1114),
  ('var_expand -> var_fancy_array','var_expand',1,'p_var_expand','js_parse.py',1121),
  ('var_expand -> var_fancy_object','var_expand',1,'p_var_expand','js_parse.py',1122),
  ('var_type_simple -> id_var_type','var_type_simple',1,'p_var_type_simple','js_parse.py',1128),
  ('var_type_simple -> SHORT','var_type_simple',1,'p_var_type_simple','js_parse.py',1129),
  ('var_type_simple -> DOUBLE','var_type_simple',1,'p_var_type_simple','js_parse.py',1130),
  ('var_type_simple -> CHAR','var_type_simple',1,'p_var_type_simple','js_parse.py',1131),
  ('var_type_simple -> BYTE','var_type_simple',1,'p_var_type_simple','js_parse.py',1132),
  ('var_type_simple -> INFERRED','var_type_simple',1,'p_var_type_simple','js_parse.py',1133),
  ('var_type_simple -> var_type_simple template_ref','var_type_simple',2,'p_var_type_simple','js_parse.py',1134),
  ('var_type -> var_type id_var_type','var_type',2,'p_var_type','js_parse.py',1139),
  ('var_type -> id_var_type','var_type',1,'p_var_type','js_parse.py',1140),
  ('var_type -> SHORT','var_type',1,'p_var_type','js_parse.py',1141),
  ('var_type -> DOUBLE','var_type',1,'p_var_type','js_parse.py',1142),
  ('var_type -> CHAR','var_type',1,'p_var_type','js_parse.py',1143),
  ('var_type -> BYTE','var_type',1,'p_var_type','js_parse.py',1144),
  ('var_type -> INFERRED','var_type',1,'p_var_type','js_parse.py',1145),
  ('var_type -> var_type template_ref','var_type',2,'p_var_type','js_parse.py',1146),
  ('typeof_opt -> TYPEOF','typeof_opt',1,'p_typeof_opt','js_parse.py',1194),
  ('typeof_opt -> <empty>','typeof_opt',0,'p_typeof_opt','js_parse.py',1195),
  ('simple_templatedeflist -> typeof_opt var_type','simple_templatedeflist',2,'p_simple_templatedeflist','js_parse.py',1203),
  ('simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type','simple_templatedeflist',4,'p_simple_templatedeflist','js_parse.py',1204),
  ('simple_var_decl -> VAR id','simple_var_decl',2,'p_simple_var_decl','js_parse.py',1224),
  ('simple_var_decl -> LET id','simple_var_decl',2,'p_simple_var_decl','js_parse.py',1225),
  ('simple_var_decl -> id','simple_var_decl',1,'p_simple_var_decl','js_parse.py',1226),
  ('cmplx_assign -> ASSIGNPLUS','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1247),
  ('cmplx_assign -> ASSIGNMINUS','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1248),
  ('cmplx_assign -> ASSIGNDIVIDE','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1249),
  ('cmplx_assign -> ASSIGNTIMES','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1250),
  ('cmplx_assign -> ASSIGNMOD','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1251),
  ('cmplx_assign -> ASSIGNBOR','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1252),
  ('cmplx_assign -> ASSIGNBAND','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1253),
  ('cmplx_assign -> ASSIGNBXOR','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1254),
  ('cmplx_assign -> ASSIGNLSHIFT','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1255),
  ('cmplx_assign -> ASSIGNRSHIFT','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1256),
  ('cmplx_assign -> ASSIGNRRSHIFT','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1257),
  ('cmplx_assign -> ASSIGNLLSHIFT','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1258),
  ('cmplx_assign -> ASSIGN','cmplx_assign',1,'p_cmplx_assign','js_parse.py',1259),
  ('throw -> THROW expr','throw',2,'p_throw','js_parse.py',1266),
  ('assign -> expr cmplx_assign expr','assign',3,'p_assign','js_parse.py',1271),
  ('assign -> assign cmplx_assign expr','assign',3,'p_assign','js_parse.py',1272),
  ('assign -> expr','assign',1,'p_assign','js_parse.py',1273),
  ('exprlist -> expr','exprlist',1,'p_exprlist','js_parse.py',1289),
  ('typed_class -> TYPED CLASS id template_opt typed_class_tail','typed_class',5,'p_typed_class','js_parse.py',1334),
  ('typed_class_tail -> typed_inherit_opt LBRACKET typed_class_body_opt RBRACKET','typed_class_tail',4,'p_typed_class_tail','js_parse.py',1350),
  ('typed_class_body_opt -> typed_class_list','typed_class_body_opt',1,'p_typed_class_body_opt','js_parse.py',1356),
  ('typed_class_body_opt -> <empty>','typed_class_body_opt',0,'p_typed_class_body_opt','js_parse.py',1357),
  ('typed_class_list -> typed_class_element','typed_class_list',1,'p_typed_class_list','js_parse.py',1363),
  ('typed_class_list -> typed_class_list typed_class_element','typed_class_list',2,'p_typed_class_list','js_parse.py',1364),
  ('typed_class_element -> class_element','typed_class_element',1,'p_typed_class_element','js_parse.py',1387),
  ('typed_class_element -> var_decl_with_arr SEMI','typed_class_element',2,'p_typed_class_element','js_parse.py',1388),
  ('typed_inherit_opt -> EXTENDS id','typed_inherit_opt',2,'p_typed_inherit_opt','js_parse.py',1394),
  ('typed_inherit_opt -> <empty>','typed_inherit_opt',0,'p_typed_inherit_opt','js_parse.py',1395),
  ('enum -> ENUM ID LBRACKET enum_body RBRACKET','enum',5,'p_enum','js_parse.py',1405),
  ('enum_body -> enum_memberlist comma_opt','enum_body',2,'p_enum_body','js_parse.py',1412),
  ('enum_body -> <empty>','enum_body',0,'p_enum_body','js_parse.py',1413),
  ('enum_memberlist -> enum_member','enum_memberlist',1,'p_enum_memberlist','js_parse.py',1421),
  ('enum_memberlist -> enum_memberlist COMMA enum_member','enum_memberlist',3,'p_enum_memberlist','js_parse.py',1422),
  ('enum_member -> id_no_enum','enum_member',1,'p_enum_member','js_parse.py',1436),
  ('enum_member -> id_no_enum ASSIGN expr_no_list','enum_member',3,'p_enum_member','js_parse.py',1437),
  ('iface_extends -> EXTENDS id','iface_extends',2,'p_iface_extends','js_parse.py',1446),
  ('iface_extends -> iface_extends COMMA id','iface_extends',3,'p_iface_extends','js_parse.py',1447),
  ('iface_extends -> <empty>','iface_extends',0,'p_iface_extends','js_parse.py',1448),
  ('iface_method -> push_scope id template_opt LPAREN funcdeflist RPAREN func_type_opt SEMI','iface_method',8,'p_iface_method','js_parse.py',1459),
  ('iface_item -> typescript_class_property','iface_item',1,'p_iface_item','js_parse.py',1483),
  ('iface_item -> iface_method','iface_item',1,'p_iface_item','js_parse.py',1484),
  ('iface_body -> iface_item','iface_body',1,'p_iface_body','js_parse.py',1490),
  ('iface_body -> iface_body iface_item','iface_body',2,'p_iface_body','js_parse.py',1491),
  ('iface_body -> <empty>','iface_body',0,'p_iface_body','js_parse.py',1492),
  ('iface_tail -> LBRACKET iface_body RBRACKET','iface_tail',3,'p_iface_tail','js_parse.py',1504),
  ('interface -> INTERFACE id iface_extends iface_tail','interface',4,'p_interface','js_parse.py',1509),
  ('class -> CLASS id template_opt class_tail','class',4,'p_class','js_parse.py',1517),
  ('exprclass -> CLASS id template_opt class_tail','exprclass',4,'p_exprclass','js_parse.py',1535),
  ('class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET','class_tail',4,'p_class_tail','js_parse.py',1550),
  ('class_parent_id -> var_type','class_parent_id',1,'p_class_parent_id','js_parse.py',1560),
  ('class_parent_id -> class_parent_id DOT var_type','class_parent_id',3,'p_class_parent_id','js_parse.py',1561),
  ('dot_expr -> id','dot_expr',1,'p_dot_expr','js_parse.py',1570),
  ('dot_expr -> id DOT dot_expr','dot_expr',3,'p_dot_expr','js_parse.py',1571),
  ('class_parent_call -> dot_expr func_call','class_parent_call',2,'p_class_parent_call','js_parse.py',1579),
  ('class_parent_call -> dot_expr','class_parent_call',1,'p_class_parent_call','js_parse.py',1580),
  ('class_list -> class_parent_id','class_list',1,'p_class_list','js_parse.py',1590),
  ('class_list -> class_parent_call','class_list',1,'p_class_list','js_parse.py',1591),
  ('class_list -> class_list COMMA class_parent_id','class_list',3,'p_class_list','js_parse.py',1592),
  ('class_heritage -> EXTENDS class_list','class_heritage',2,'p_class_heritage','js_parse.py',1605),
  ('class_heritage_opt -> class_heritage','class_heritage_opt',1,'p_class_heritage_opt','js_parse.py',1613),
  ('class_heritage_opt -> <empty>','class_heritage_opt',0,'p_class_heritage_opt','js_parse.py',1614),
  ('class_body_opt -> class_element_list','class_body_opt',1,'p_class_body_opt','js_parse.py',1622),
  ('class_body_opt -> <empty>','class_body_opt',0,'p_class_body_opt','js_parse.py',1623),
  ('class_element_list -> class_element','class_element_list',1,'p_class_element_list','js_parse.py',1636),
  ('class_element_list -> class_element_list class_element','class_element_list',2,'p_class_element_list','js_parse.py',1637),
  ('class_element -> method_def','class_element',1,'p_class_element','js_parse.py',1648),
  ('class_element -> typescript_class_property','class_element',1,'p_class_element','js_parse.py',1649),
  ('prefix_opt -> STATIC','prefix_opt',1,'p_prefix_opt','js_parse.py',1658),
  ('prefix_opt -> GET','prefix_opt',1,'p_prefix_opt','js_parse.py',1659),
  ('prefix_opt -> SET','prefix_opt',1,'p_prefix_opt','js_parse.py',1660),
  ('prefix_opt -> <empty>','prefix_opt',0,'p_prefix_opt','js_parse.py',1661),
  ('id_right -> id','id_right',1,'p_id_right','js_parse.py',1669),
  ('property_id -> ID','property_id',1,'p_property_id','js_parse.py',1675),
  ('property_id -> HASH ID','property_id',2,'p_property_id','js_parse.py',1676),
  ('property_id -> GET','property_id',1,'p_property_id','js_parse.py',1677),
  ('property_id -> SET','property_id',1,'p_property_id','js_parse.py',1678),
  ('property_id -> DELETE','property_id',1,'p_property_id','js_parse.py',1679),
  ('property_id -> FOR','property_id',1,'p_property_id','js_parse.py',1680),
  ('property_id -> WHILE','property_id',1,'p_property_id','js_parse.py',1681),
  ('property_id -> CATCH','property_id',1,'p_property_id','js_parse.py',1682),
  ('property_id -> TRY','property_id',1,'p_property_id','js_parse.py',1683),
  ('property_id -> THROW','property_id',1,'p_property_id','js_parse.py',1684),
  ('property_id -> DO','property_id',1,'p_property_id','js_parse.py',1685),
  ('property_id -> FINALLY','property_id',1,'p_property_id','js_parse.py',1686),
  ('property_id -> NUMBER','property_id',1,'p_property_id','js_parse.py',1687),
  ('property_id -> IF','property_id',1,'p_property_id','js_parse.py',1688),
  ('property_id -> ENUM','property_id',1,'p_property_id','js_parse.py',1689),
  ('property_id -> ELSE','property_id',1,'p_property_id','js_parse.py',1690),
  ('property_id -> VAR','property_id',1,'p_property_id','js_parse.py',1691),
  ('property_id -> CONST','property_id',1,'p_property_id','js_parse.py',1692),
  ('property_id -> LET','property_id',1,'p_property_id','js_parse.py',1693),
  ('property_id -> STATIC','property_id',1,'p_property_id','js_parse.py',1694),
  ('property_id -> YIELD','property_id',1,'p_property_id','js_parse.py',1695),
  ('property_id -> FUNCTION','property_id',1,'p_property_id','js_parse.py',1696),
  ('property_id -> RETURN','property_id',1,'p_property_id','js_parse.py',1697),
  ('property_id -> LSBRACKET expr RSBRACKET','property_id',3,'p_property_id','js_parse.py',1698),
  ('property_id_right -> property_id','property_id_right',1,'p_property_id_right','js_parse.py',1712),
  ('property_id_opt -> property_id property_id','property_id_opt',2,'p_property_id_opt','js_parse.py',1718),
  ('property_id_opt -> property_id','property_id_opt',1,'p_property_id_opt','js_parse.py',1719),
  ('star_opt -> TIMES','star_opt',1,'p_star_opt','js_parse.py',1729),
  ('star_opt -> <empty>','star_opt',0,'p_star_opt','js_parse.py',1730),
  ('method -> star_opt property_id_opt LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET','method',9,'p_method','js_parse.py',1741),
  ('getset_id -> property_id','getset_id',1,'p_getset_id','js_parse.py',1786),
  ('getset_id -> NUMBER','getset_id',1,'p_getset_id','js_parse.py',1787),
  ('method_def -> method','method_def',1,'p_method_def','js_parse.py',1794),
  ('method_def_error -> method error','method_def_error',2,'p_method_def_error','js_parse.py',1801),
  ('static -> STATIC','static',1,'p_static','js_parse.py',1809),
  ('cls_prefix -> STATIC','cls_prefix',1,'p_cls_prefix','js_parse.py',1813),
  ('cls_prefix -> CLASS_PROP_PRIVATE','cls_prefix',1,'p_cls_prefix','js_parse.py',1814),
  ('cls_prefix -> CLASS_PROP_PUBLIC','cls_prefix',1,'p_cls_prefix','js_parse.py',1815),
  ('cls_prefix_opt -> cls_prefix','cls_prefix_opt',1,'p_cls_prefix_opt','js_parse.py',1820),
  ('cls_prefix_opt -> <empty>','cls_prefix_opt',0,'p_cls_prefix_opt','js_parse.py',1821),
  ('prop_id_vartype_opt -> ID_COLON COLON var_type','prop_id_vartype_opt',3,'p_prop_id_vartype_opt','js_parse.py',1827),
  ('prop_id_vartype_opt -> ID','prop_id_vartype_opt',1,'p_prop_id_vartype_opt','js_parse.py',1828),
  ('typescript_class_property -> CLASS_PROP_PRE cls_prefix_opt prop_id_vartype_opt ASSIGN expr_for_arraylit SEMI','typescript_class_property',6,'p_typescript_class_property','js_parse.py',1836),
  ('typescript_class_property -> CLASS_PROP_PRE cls_prefix_opt ID_COLON COLON var_type SEMI','typescript_class_property',6,'p_typescript_class_property','js_parse.py',1837),
  ('var_element -> id','var_element',1,'p_var_element','js_parse.py',1857),
  ('var_element -> SHORT','var_element',1,'p_var_element','js_parse.py',1858),
  ('var_element -> DOUBLE','var_element',1,'p_var_element','js_parse.py',1859),
  ('var_element -> CHAR','var_element',1,'p_var_element','js_parse.py',1860),
  ('var_element -> BYTE','var_element',1,'p_var_element','js_parse.py',1861),
  ('var_element -> id template_ref','var_element',2,'p_var_element','js_parse.py',1862),
  ('var_type2 -> var_element','var_type2',1,'p_var_type2','js_parse.py',1876),
  ('class_property -> var_type2 id','class_property',2,'p_class_property','js_parse.py',1888),
  ('class_property -> class_property ASSIGN expr','class_property',3,'p_class_property','js_parse.py',1889),
  ('class_property -> class_property COMMA id','class_property',3,'p_class_property','js_parse.py',1890),
  ('class_property -> class_property COMMA id ASSIGN expr','class_property',5,'p_class_property','js_parse.py',1891),
  ('setter_param_list -> var_type_opt id','setter_param_list',2,'p_setter_param_list','js_parse.py',1939),
  ('setter_param_list -> var_type','setter_param_list',1,'p_setter_param_list','js_parse.py',1940),
  ('template_ref_opt -> template_ref','template_ref_opt',1,'p_template_ref_opt','js_parse.py',1960),
  ('template_ref_opt -> <empty>','template_ref_opt',0,'p_template_ref_opt','js_parse.py',1961),
  ('func_call -> template_ref_opt LPAREN exprlist RPAREN','func_call',4,'p_func_call','js_parse.py',1969),
  ('func_call -> template_ref_opt LPAREN TRIPLEDOT binding_ident RPAREN','func_call',5,'p_func_call','js_parse.py',1970),
  ('func_call -> template_ref_opt LPAREN expr COMMA TRIPLEDOT binding_ident RPAREN','func_call',7,'p_func_call','js_parse.py',1971),
  ('func_call -> template_ref_opt LPAREN RPAREN','func_call',3,'p_func_call','js_parse.py',1972),
  ('funcdeflist -> var_decl_no_list','funcdeflist',1,'p_funcdeflist','js_parse.py',1994),
  ('funcdeflist -> funcdeflist COMMA var_decl_no_list','funcdeflist',3,'p_funcdeflist','js_parse.py',1995),
  ('funcdeflist -> typed_argument','funcdeflist',1,'p_funcdeflist','js_parse.py',1996),
  ('funcdeflist -> funcdeflist COMMA typed_argument','funcdeflist',3,'p_funcdeflist','js_parse.py',1997),
  ('funcdeflist -> <empty>','funcdeflist',0,'p_funcdeflist','js_parse.py',1998),
  ('template_opt -> template','template_opt',1,'p_template_opt','js_parse.py',2016),
  ('template_opt -> <empty>','template_opt',0,'p_template_opt','js_parse.py',2017),
  ('func_type_opt -> COLON var_type_opt','func_type_opt',2,'p_func_type_opt','js_parse.py',2026),
  ('func_type_opt -> <empty>','func_type_opt',0,'p_func_type_opt','js_parse.py',2027),
  ('funcref -> FUNCTION star_opt id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt','funcref',9,'p_funcref','js_parse.py',2036),
  ('func_native -> NATIVE push_scope FUNCTION id template_opt LPAREN funcdeflist RPAREN func_type_opt','func_native',9,'p_func_native','js_parse.py',2057),
  ('function -> FUNCTION star_opt id template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET','function',12,'p_function','js_parse.py',2080),
  ('lbracket_restrict -> LBRACKET','lbracket_restrict',1,'p_lbracket_restrict','js_parse.py',2108),
  ('rbracket_restrict -> RBRACKET','rbracket_restrict',1,'p_rbracket_restrict','js_parse.py',2115),
  ('var_type_opt -> var_type','var_type_opt',1,'p_var_type_opt','js_parse.py',2121),
  ('var_type_opt -> <empty>','var_type_opt',0,'p_var_type_opt','js_parse.py',2122),
  ('colon_opt -> COLON','colon_opt',1,'p_colon_opt','js_parse.py',2128),
  ('colon_opt -> <empty>','colon_opt',0,'p_colon_opt','js_parse.py',2129),
  ('func_name_opt -> ID','func_name_opt',1,'p_func_name_opt','js_parse.py',2135),
  ('func_name_opt -> SET','func_name_opt',1,'p_func_name_opt','js_parse.py',2136),
  ('func_name_opt -> GET','func_name_opt',1,'p_func_name_opt','js_parse.py',2137),
  ('func_name_opt -> SHORT','func_name_opt',1,'p_func_name_opt','js_parse.py',2138),
  ('func_name_opt -> DOUBLE','func_name_opt',1,'p_func_name_opt','js_parse.py',2139),
  ('func_name_opt -> TYPED','func_name_opt',1,'p_func_name_opt','js_parse.py',2140),
  ('func_name_opt -> <empty>','func_name_opt',0,'p_func_name_opt','js_parse.py',2141),
  ('func_name -> ID','func_name',1,'p_func_name','js_parse.py',2149),
  ('func_name -> SET','func_name',1,'p_func_name','js_parse.py',2150),
  ('func_name -> GET','func_name',1,'p_func_name','js_parse.py',2151),
  ('func_name -> SHORT','func_name',1,'p_func_name','js_parse.py',2152),
  ('func_name -> DOUBLE','func_name',1,'p_func_name','js_parse.py',2153),
  ('func_name -> TYPED','func_name',1,'p_func_name','js_parse.py',2154),
  ('exprfunction -> FUNCTION star_opt func_name_opt template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict','exprfunction',13,'p_exprfunction','js_parse.py',2160),
  ('exprfunction -> FUNCTION star_opt func_name_opt template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict','exprfunction',12,'p_exprfunction','js_parse.py',2161),
  ('comma_opt -> COMMA','comma_opt',1,'p_comma_opt','js_parse.py',2213),
  ('comma_opt -> <empty>','comma_opt',0,'p_comma_opt','js_parse.py',2214),
  ('expr_for_arraylit -> expr_no_list','expr_for_arraylit',1,'p_expr_for_arraylit','js_parse.py',2218),
  ('expr_for_arraylit -> obj_literal','expr_for_arraylit',1,'p_expr_for_arraylit','js_parse.py',2219),
  ('arraylist -> expr_for_arraylit','arraylist',1,'p_arraylist','js_parse.py',2225),
  ('arraylist -> arraylist expr_for_arraylit','arraylist',2,'p_arraylist','js_parse.py',2226),
  ('arraylist -> arraylist arrow_function','arraylist',2,'p_arraylist','js_parse.py',2227),
  ('arraylist -> arraylist COMMA','arraylist',2,'p_arraylist','js_parse.py',2228),
  ('array_literal -> LSBRACKET arraylist RSBRACKET','array_literal',3,'p_array_literal','js_parse.py',2245),
  ('array_literal -> LSBRACKET RSBRACKET','array_literal',2,'p_array_literal','js_parse.py',2246),
  ('id_str_or_num -> id','id_str_or_num',1,'p_id_str_or_num','js_parse.py',2255),
  ('id_str_or_num -> NUMBER','id_str_or_num',1,'p_id_str_or_num','js_parse.py',2256),
  ('id_str_or_num -> STRINGLIT','id_str_or_num',1,'p_id_str_or_num','js_parse.py',2257),
  ('typeof -> TYPEOF expr','typeof',2,'p_typeof','js_parse.py',2272),
  ('typeof_no_list -> TYPEOF expr_no_list','typeof_no_list',2,'p_typeof_no_list','js_parse.py',2277),
  ('objlit_key -> id_str_or_num','objlit_key',1,'p_objlit_key','js_parse.py',2283),
  ('objlit_key -> ID_COLON','objlit_key',1,'p_objlit_key','js_parse.py',2284),
  ('objlit_key -> NEW','objlit_key',1,'p_objlit_key','js_parse.py',2285),
  ('objlit_key -> CATCH','objlit_key',1,'p_objlit_key','js_parse.py',2286),
  ('objlit_key -> TRY','objlit_key',1,'p_objlit_key','js_parse.py',2287),
  ('objlit_key -> FINALLY','objlit_key',1,'p_objlit_key','js_parse.py',2288),
  ('objlit_key -> THROW','objlit_key',1,'p_objlit_key','js_parse.py',2289),
  ('objlit_key -> LSBRACKET expr RSBRACKET','objlit_key',3,'p_objlit_key','js_parse.py',2290),
  ('objlit_key -> CLASS_PROP_PRE objlit_key','objlit_key',2,'p_objlit_key','js_parse.py',2291),
  ('obj_lit_list -> objlit_key COLON expr','obj_lit_list',3,'p_obj_lit_list','js_parse.py',2303),
  ('obj_lit_list -> id','obj_lit_list',1,'p_obj_lit_list','js_parse.py',2304),
  ('obj_lit_list -> objlit_function','obj_lit_list',1,'p_obj_lit_list','js_parse.py',2305),
  ('obj_lit_list -> obj_lit_list COMMA objlit_function','obj_lit_list',3,'p_obj_lit_list','js_parse.py',2306),
  ('obj_lit_list -> obj_lit_list COMMA objlit_key COLON expr','obj_lit_list',5,'p_obj_lit_list','js_parse.py',2307),
  ('obj_lit_list -> obj_lit_list COMMA id','obj_lit_list',3,'p_obj_lit_list','js_parse.py',2308),
  ('obj_lit_list -> obj_lit_list COMMA','obj_lit_list',2,'p_obj_lit_list','js_parse.py',2309),
  ('obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict','obj_literal',4,'p_obj_literal','js_parse.py',2343),
  ('obj_literal -> lbracket_restrict rbracket_restrict','obj_literal',2,'p_obj_literal','js_parse.py',2344),
  ('star_opt_2 -> <empty>','star_opt_2',0,'p_star_opt_2','js_parse.py',2355),
  ('star_opt_2 -> TIMES','star_opt_2',1,'p_star_opt_2','js_parse.py',2356),
  ('objlit_function -> TIMES func_name LPAREN funcdeflist RPAREN lbracket_restrict statementlist_opt rbracket_restrict','objlit_function',8,'p_objlit_function','js_parse.py',2363),
  ('objlit_function -> func_name LPAREN funcdeflist RPAREN lbracket_restrict statementlist_opt rbracket_restrict','objlit_function',7,'p_objlit_function','js_parse.py',2364),
  ('objlit_function -> GET func_name LPAREN funcdeflist RPAREN lbracket_restrict statementlist_opt rbracket_restrict','objlit_function',8,'p_objlit_function','js_parse.py',2365),
  ('objlit_function -> SET func_name LPAREN funcdeflist RPAREN lbracket_restrict statementlist_opt rbracket_restrict','objlit_function',8,'p_objlit_function','js_parse.py',2366),
  ('delete -> DELETE expr','delete',2,'p_delete','js_parse.py',2400),
  ('new -> NEW expr','new',2,'p_new','js_parse.py',2407),
  ('new_no_list -> NEW expr_no_list','new_no_list',2,'p_new_no_list','js_parse.py',2413),
  ('inc_no_list -> expr_no_list INC','inc_no_list',2,'p_inc_no_list','js_parse.py',2419),
  ('inc_no_list -> INC expr_no_list','inc_no_list',2,'p_inc_no_list','js_parse.py',2420),
  ('dec -> expr DEC','dec',2,'p_dec','js_parse.py',2429),
  ('dec -> DEC expr','dec',2,'p_dec','js_parse.py',2430),
  ('not -> NOT expr','not',2,'p_not','js_parse.py',2440),
  ('inc -> expr INC','inc',2,'p_inc','js_parse.py',2445),
  ('inc -> INC expr','inc',2,'p_inc','js_parse.py',2446),
  ('dec_no_list -> expr_no_list DEC','dec_no_list',2,'p_dec_no_list','js_parse.py',2455),
  ('dec_no_list -> DEC expr_no_list','dec_no_list',2,'p_dec_no_list','js_parse.py',2456),
  ('not_no_list -> NOT expr_no_list','not_no_list',2,'p_not_no_list','js_parse.py',2466),
  ('bitinv_no_list -> BITINV expr_no_list','bitinv_no_list',2,'p_bitinv_no_list','js_parse.py',2471),
  ('bitinv -> BITINV expr','bitinv',2,'p_bitinv','js_parse.py',2476),
  ('strlit -> STRINGLIT','strlit',1,'p_strlit','js_parse.py',2481),
  ('lparen_restrict -> LPAREN','lparen_restrict',1,'p_lparen_restrict','js_parse.py',2486),
  ('rparen_restrict -> RPAREN','rparen_restrict',1,'p_rparen_restrict','js_parse.py',2494),
  ('lsbracket_restrict -> LSBRACKET','lsbracket_restrict',1,'p_lsbracket_restrict','js_parse.py',2502),
  ('rsbracket_restrict -> RSBRACKET','rsbracket_restrict',1,'p_rsbracket_restrict','js_parse.py',2510),
  ('concise_body -> expr_no_list','concise_body',1,'p_concise_body','js_parse.py',2518),
  ('concise_body -> LBRACKET statementlist_opt RBRACKET','concise_body',3,'p_concise_body','js_parse.py',2519),
  ('id_colon2 -> ID_COLON','id_colon2',1,'p_id_colon2','js_parse.py',2531),
  ('id_colon2 -> id','id_colon2',1,'p_id_colon2','js_parse.py',2532),
  ('id_colon2 -> CLASS_PROP_PRE ID_COLON','id_colon2',2,'p_id_colon2','js_parse.py',2533),
  ('typed_argument -> id_colon2','typed_argument',1,'p_typed_argument','js_parse.py',2542),
  ('typed_argument -> id_colon2 COLON var_type','typed_argument',3,'p_typed_argument','js_parse.py',2543),
  ('typed_argument -> id_colon2 COLON FUNCTION','typed_argument',3,'p_typed_argument','js_parse.py',2544),
  ('typed_argument -> id_colon2 COLON var_type ASSIGN expr_for_arraylit','typed_argument',5,'p_typed_argument','js_parse.py',2545),
  ('typed_argument -> id_colon2 COLON FUNCTION ASSIGN expr_for_arraylit','typed_argument',5,'p_typed_argument','js_parse.py',2546),
  ('typed_argument -> id_colon2 ASSIGN expr_for_arraylit','typed_argument',3,'p_typed_argument','js_parse.py',2547),
  ('arrowparamlist_opt -> typed_argument','arrowparamlist_opt',1,'p_arrowparamlist_opt','js_parse.py',2564),
  ('arrowparamlist_opt -> arrowparamlist_opt COMMA typed_argument','arrowparamlist_opt',3,'p_arrowparamlist_opt','js_parse.py',2565),
  ('arrowparamlist_opt -> <empty>','arrowparamlist_opt',0,'p_arrowparamlist_opt','js_parse.py',2566),
  ('arrow_function -> ARROW_PRE arrowparamlist_opt RPAREN ARROW concise_body','arrow_function',5,'p_arrow_function','js_parse.py',2589),
  ('arrow_function -> ARROW_PRE arrowparamlist_opt RPAREN COLON var_type ARROW concise_body','arrow_function',7,'p_arrow_function','js_parse.py',2590),
  ('arrow_function -> ID ARROW concise_body','arrow_function',3,'p_arrow_function','js_parse.py',2591),
  ('id_colon -> ID_COLON','id_colon',1,'p_id_colon','js_parse.py',2644),
  ('member_name -> ID','member_name',1,'p_member_name','js_parse.py',2648),
  ('member_name -> HASH ID','member_name',2,'p_member_name','js_parse.py',2649),
  ('member_name -> NEW','member_name',1,'p_member_name','js_parse.py',2650),
  ('member_name -> TRY','member_name',1,'p_member_name','js_parse.py',2651),
  ('member_name -> DELETE','member_name',1,'p_member_name','js_parse.py',2652),
  ('member_name -> FINALLY','member_name',1,'p_member_name','js_parse.py',2653),
  ('member_name -> THROW','member_name',1,'p_member_name','js_parse.py',2654),
  ('member_name -> RETURN','member_name',1,'p_member_name','js_parse.py',2655),
  ('member_name -> CATCH','member_name',1,'p_member_name','js_parse.py',2656),
  ('expr -> NUMBER','expr',1,'p_expr','js_parse.py',2663),
  ('expr -> strlit','expr',1,'p_expr','js_parse.py',2664),
  ('expr -> id','expr',1,'p_expr','js_parse.py',2665),
  ('expr -> id_colon','expr',1,'p_expr','js_parse.py',2666),
  ('expr -> id template_ref','expr',2,'p_expr','js_parse.py',2667),
  ('expr -> template_ref','expr',1,'p_expr','js_parse.py',2668),
  ('expr -> array_literal','expr',1,'p_expr','js_parse.py',2669),
  ('expr -> arrow_function','expr',1,'p_expr','js_parse.py',2670),
  ('expr -> exprfunction','expr',1,'p_expr','js_parse.py',2671),
  ('expr -> exprclass','expr',1,'p_expr','js_parse.py',2672),
  ('expr -> obj_literal','expr',1,'p_expr','js_parse.py',2673),
  ('expr -> dynamic_import','expr',1,'p_expr','js_parse.py',2674),
  ('expr -> expr cmplx_assign expr','expr',3,'p_expr','js_parse.py',2675),
  ('expr -> expr cmplx_assign expr COLON var_type SEMI','expr',6,'p_expr','js_parse.py',2676),
  ('expr -> expr RSHIFT expr','expr',3,'p_expr','js_parse.py',2677),
  ('expr -> expr LSHIFT expr','expr',3,'p_expr','js_parse.py',2678),
  ('expr -> expr EXPONENT expr','expr',3,'p_expr','js_parse.py',2679),
  ('expr -> expr DOUBLEQ expr','expr',3,'p_expr','js_parse.py',2680),
  ('expr -> expr LLSHIFT expr','expr',3,'p_expr','js_parse.py',2681),
  ('expr -> expr RRSHIFT expr','expr',3,'p_expr','js_parse.py',2682),
  ('expr -> expr COND_DOT expr','expr',3,'p_expr','js_parse.py',2683),
  ('expr -> expr DOT expr','expr',3,'p_expr','js_parse.py',2684),
  ('expr -> expr DOT member_name','expr',3,'p_expr','js_parse.py',2685),
  ('expr -> expr DOT DELETE','expr',3,'p_expr','js_parse.py',2686),
  ('expr -> expr DOT DEFAULT','expr',3,'p_expr','js_parse.py',2687),
  ('expr -> expr LAND expr','expr',3,'p_expr','js_parse.py',2688),
  ('expr -> expr LOR expr','expr',3,'p_expr','js_parse.py',2689),
  ('expr -> expr BOR expr','expr',3,'p_expr','js_parse.py',2690),
  ('expr -> expr INSTANCEOF expr','expr',3,'p_expr','js_parse.py',2691),
  ('expr -> expr BXOR expr','expr',3,'p_expr','js_parse.py',2692),
  ('expr -> expr BAND expr','expr',3,'p_expr','js_parse.py',2693),
  ('expr -> expr EQUAL expr','expr',3,'p_expr','js_parse.py',2694),
  ('expr -> expr EQUAL_STRICT expr','expr',3,'p_expr','js_parse.py',2695),
  ('expr -> expr NOTEQUAL_STRICT expr','expr',3,'p_expr','js_parse.py',2696),
  ('expr -> expr GTHAN expr','expr',3,'p_expr','js_parse.py',2697),
  ('expr -> expr GTHANEQ expr','expr',3,'p_expr','js_parse.py',2698),
  ('expr -> expr LTHAN expr','expr',3,'p_expr','js_parse.py',2699),
  ('expr -> expr MOD expr','expr',3,'p_expr','js_parse.py',2700),
  ('expr -> expr LTHANEQ expr','expr',3,'p_expr','js_parse.py',2701),
  ('expr -> expr NOTEQUAL expr','expr',3,'p_expr','js_parse.py',2702),
  ('expr -> expr PLUS expr','expr',3,'p_expr','js_parse.py',2703),
  ('expr -> expr MINUS expr','expr',3,'p_expr','js_parse.py',2704),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','js_parse.py',2705),
  ('expr -> expr TIMES expr','expr',3,'p_expr','js_parse.py',2706),
  ('expr -> expr IN expr','expr',3,'p_expr','js_parse.py',2707),
  ('expr -> expr func_call','expr',2,'p_expr','js_parse.py',2708),
  ('expr -> expr lsbracket_restrict expr rsbracket_restrict','expr',4,'p_expr','js_parse.py',2709),
  ('expr -> expr QEST expr COLON expr','expr',5,'p_expr','js_parse.py',2710),
  ('expr -> expr COMMA expr','expr',3,'p_expr','js_parse.py',2711),
  ('expr -> lparen_restrict expr rparen_restrict','expr',3,'p_expr','js_parse.py',2712),
  ('expr -> expr_uminus','expr',1,'p_expr','js_parse.py',2713),
  ('expr -> expr_uplus','expr',1,'p_expr','js_parse.py',2714),
  ('expr -> not','expr',1,'p_expr','js_parse.py',2715),
  ('expr -> bitinv','expr',1,'p_expr','js_parse.py',2716),
  ('expr -> new','expr',1,'p_expr','js_parse.py',2717),
  ('expr -> inc','expr',1,'p_expr','js_parse.py',2718),
  ('expr -> dec','expr',1,'p_expr','js_parse.py',2719),
  ('expr -> typeof','expr',1,'p_expr','js_parse.py',2720),
  ('expr -> re_lit','expr',1,'p_expr','js_parse.py',2721),
  ('expr_no_list -> NUMBER','expr_no_list',1,'p_expr_no_list','js_parse.py',2780),
  ('expr_no_list -> strlit','expr_no_list',1,'p_expr_no_list','js_parse.py',2781),
  ('expr_no_list -> id','expr_no_list',1,'p_expr_no_list','js_parse.py',2782),
  ('expr_no_list -> id_colon','expr_no_list',1,'p_expr_no_list','js_parse.py',2783),
  ('expr_no_list -> array_literal','expr_no_list',1,'p_expr_no_list','js_parse.py',2784),
  ('expr_no_list -> exprfunction','expr_no_list',1,'p_expr_no_list','js_parse.py',2785),
  ('expr_no_list -> exprclass','expr_no_list',1,'p_expr_no_list','js_parse.py',2786),
  ('expr_no_list -> dynamic_import','expr_no_list',1,'p_expr_no_list','js_parse.py',2787),
  ('expr_no_list -> expr_no_list cmplx_assign expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2788),
  ('expr_no_list -> expr_no_list RSHIFT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2789),
  ('expr_no_list -> expr_no_list LSHIFT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2790),
  ('expr_no_list -> expr_no_list LLSHIFT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2791),
  ('expr_no_list -> expr_no_list RRSHIFT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2792),
  ('expr_no_list -> expr_no_list COND_DOT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2793),
  ('expr_no_list -> expr_no_list DOT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2794),
  ('expr_no_list -> expr_no_list EXPONENT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2795),
  ('expr_no_list -> expr_no_list LAND expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2796),
  ('expr_no_list -> expr_no_list LOR expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2797),
  ('expr_no_list -> expr_no_list BOR expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2798),
  ('expr_no_list -> expr_no_list INSTANCEOF expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2799),
  ('expr_no_list -> expr_no_list BXOR expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2800),
  ('expr_no_list -> expr_no_list BAND expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2801),
  ('expr_no_list -> expr_no_list EQUAL expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2802),
  ('expr_no_list -> expr_no_list EQUAL_STRICT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2803),
  ('expr_no_list -> expr_no_list NOTEQUAL_STRICT expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2804),
  ('expr_no_list -> expr_no_list GTHAN expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2805),
  ('expr_no_list -> expr_no_list GTHANEQ expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2806),
  ('expr_no_list -> expr_no_list LTHAN expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2807),
  ('expr_no_list -> expr_no_list MOD expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2808),
  ('expr_no_list -> expr_no_list LTHANEQ expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2809),
  ('expr_no_list -> expr_no_list NOTEQUAL expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2810),
  ('expr_no_list -> expr_no_list PLUS expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2811),
  ('expr_no_list -> expr_no_list MINUS expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2812),
  ('expr_no_list -> expr_no_list DIVIDE expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2813),
  ('expr_no_list -> expr_no_list TIMES expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2814),
  ('expr_no_list -> expr_no_list IN expr_no_list','expr_no_list',3,'p_expr_no_list','js_parse.py',2815),
  ('expr_no_list -> expr_no_list func_call','expr_no_list',2,'p_expr_no_list','js_parse.py',2816),
  ('expr_no_list -> expr_no_list lsbracket_restrict expr rsbracket_restrict','expr_no_list',4,'p_expr_no_list','js_parse.py',2817),
  ('expr_no_list -> expr_no_list QEST expr_no_list COLON expr_no_list','expr_no_list',5,'p_expr_no_list','js_parse.py',2818),
  ('expr_no_list -> lparen_restrict expr rparen_restrict','expr_no_list',3,'p_expr_no_list','js_parse.py',2819),
  ('expr_no_list -> expr_no_list_uminus','expr_no_list',1,'p_expr_no_list','js_parse.py',2820),
  ('expr_no_list -> expr_no_list_uplus','expr_no_list',1,'p_expr_no_list','js_parse.py',2821),
  ('expr_no_list -> not_no_list','expr_no_list',1,'p_expr_no_list','js_parse.py',2822),
  ('expr_no_list -> bitinv_no_list','expr_no_list',1,'p_expr_no_list','js_parse.py',2823),
  ('expr_no_list -> new_no_list','expr_no_list',1,'p_expr_no_list','js_parse.py',2824),
  ('expr_no_list -> inc_no_list','expr_no_list',1,'p_expr_no_list','js_parse.py',2825),
  ('expr_no_list -> dec_no_list','expr_no_list',1,'p_expr_no_list','js_parse.py',2826),
  ('expr_no_list -> typeof_no_list','expr_no_list',1,'p_expr_no_list','js_parse.py',2827),
  ('expr_no_list -> re_lit','expr_no_list',1,'p_expr_no_list','js_parse.py',2828),
  ('expr_uplus -> PLUS expr','expr_uplus',2,'p_expr_uplus','js_parse.py',2887),
  ('expr_no_list_uplus -> PLUS expr_no_list','expr_no_list_uplus',2,'p_expr_no_list_uplus','js_parse.py',2893),
  ('expr_uminus -> MINUS expr','expr_uminus',2,'p_expr_uminus','js_parse.py',2899),
  ('expr_no_list_uminus -> MINUS expr_no_list','expr_no_list_uminus',2,'p_expr_no_list_uminus','js_parse.py',2905),
  ('paren_expr -> LPAREN expr RPAREN','paren_expr',3,'p_paren_expr','js_parse.py',2911),
  ('paren_expr -> LPAREN RPAREN','paren_expr',2,'p_paren_expr','js_parse.py',2912),
  ('assign_opt -> assign','assign_opt',1,'p_assign_opt','js_parse.py',2921),
  ('assign_opt -> <empty>','assign_opt',0,'p_assign_opt','js_parse.py',2922),
  ('expr_opt -> expr','expr_opt',1,'p_expr_opt','js_parse.py',2931),
  ('expr_opt -> <empty>','expr_opt',0,'p_expr_opt','js_parse.py',2932),
  ('re_lit -> REGEXPR','re_lit',1,'p_re_lit','js_parse.py',2941),
  ('simple_var_decl_strict -> VAR id','simple_var_decl_strict',2,'p_simple_var_decl_strict','js_parse.py',2948),
  ('simple_var_decl_strict -> LET id','simple_var_decl_strict',2,'p_simple_var_decl_strict','js_parse.py',2949),
  ('for_var_decl -> expr_opt','for_var_decl',1,'p_for_var_decl','js_parse.py',2966),
  ('for_var_decl -> simple_var_decl_strict','for_var_decl',1,'p_for_var_decl','js_parse.py',2967),
  ('for_var_decl -> simple_var_decl_strict ASSIGN expr','for_var_decl',3,'p_for_var_decl','js_parse.py',2968),
  ('in_or_of -> IN','in_or_of',1,'p_in_or_of','js_parse.py',3006),
  ('in_or_of -> OF','in_or_of',1,'p_in_or_of','js_parse.py',3007),
  ('for_of_expand -> type_modifiers var_expand OF expr','for_of_expand',4,'p_for_of_expand','js_parse.py',3025),
  ('for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt','for_decl',5,'p_for_decl','js_parse.py',3035),
  ('for_decl -> id in_or_of expr','for_decl',3,'p_for_decl','js_parse.py',3036),
  ('for_decl -> simple_var_decl in_or_of expr','for_decl',3,'p_for_decl','js_parse.py',3037),
  ('for_decl -> for_of_expand','for_decl',1,'p_for_decl','js_parse.py',3038),
  ('loop_label_opt -> <empty>','loop_label_opt',0,'p_loop_label_opt','js_parse.py',3055),
  ('loop_label_opt -> ID_COLON COLON','loop_label_opt',2,'p_loop_label_opt','js_parse.py',3056),
  ('for -> loop_label_opt FOR LPAREN for_decl RPAREN statement_nonctrl','for',6,'p_for','js_parse.py',3063),
  ('for -> loop_label_opt FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET','for',8,'p_for','js_parse.py',3064),
  ('ctrl_statement -> statement_nonctrl','ctrl_statement',1,'p_ctrl_statement','js_parse.py',3079),
  ('ctrl_statement -> LBRACKET statementlist_opt RBRACKET','ctrl_statement',3,'p_ctrl_statement','js_parse.py',3080),
  ('ctrl_statement -> SEMI','ctrl_statement',1,'p_ctrl_statement','js_parse.py',3081),
  ('dowhile -> loop_label_opt DO ctrl_statement WHILE paren_expr','dowhile',5,'p_dowhile','js_parse.py',3095),
  ('while -> loop_label_opt WHILE paren_expr statement_nonctrl','while',4,'p_while','js_parse.py',3106),
  ('while -> loop_label_opt WHILE paren_expr LBRACKET statementlist_opt RBRACKET','while',6,'p_while','js_parse.py',3107),
  ('default_case -> DEFAULT COLON statementlist','default_case',3,'p_default_case','js_parse.py',3121),
  ('statementlist_opt -> statementlist','statementlist_opt',1,'p_statementlist_opt','js_parse.py',3127),
  ('statementlist_opt -> <empty>','statementlist_opt',0,'p_statementlist_opt','js_parse.py',3128),
  ('case_clause -> CASE expr COLON statementlist_opt','case_clause',4,'p_case_clause','js_parse.py',3138),
  ('case_clauses -> case_clause','case_clauses',1,'p_case_clauses','js_parse.py',3145),
  ('case_clauses -> case_clauses case_clause','case_clauses',2,'p_case_clauses','js_parse.py',3146),
  ('case_clauses_opt -> case_clauses','case_clauses_opt',1,'p_case_clauses_opt','js_parse.py',3156),
  ('case_clauses_opt -> <empty>','case_clauses_opt',0,'p_case_clauses_opt','js_parse.py',3157),
  ('case_block -> case_clauses','case_block',1,'p_case_block','js_parse.py',3167),
  ('case_block -> case_clauses_opt default_case case_clauses_opt','case_block',3,'p_case_block','js_parse.py',3168),
  ('switch -> SWITCH paren_expr LBRACKET case_block RBRACKET','switch',5,'p_switch','js_parse.py',3190),
  ('with -> WITH paren_expr ctrl_statement','with',3,'p_with','js_parse.py',3198),
  ('if -> IF paren_expr ctrl_statement','if',3,'p_if','js_parse.py',3206),
  ('try -> TRY statement_nonctrl','try',2,'p_try','js_parse.py',3215),
  ('try -> TRY LBRACKET statementlist RBRACKET','try',4,'p_try','js_parse.py',3216),
  ('try -> TRY LBRACKET RBRACKET','try',3,'p_try','js_parse.py',3217),
  ('finally -> FINALLY LBRACKET statementlist_opt RBRACKET','finally',4,'p_finally','js_parse.py',3233),
  ('export_decl -> EXPORT TIMES from_clause SEMI','export_decl',4,'p_export_decl','js_parse.py',3240),
  ('export_decl -> EXPORT export_clause from_clause SEMI','export_decl',4,'p_export_decl','js_parse.py',3241),
  ('export_decl -> EXPORT export_clause SEMI','export_decl',3,'p_export_decl','js_parse.py',3242),
  ('export_decl -> EXPORT var_decl SEMI','export_decl',3,'p_export_decl','js_parse.py',3243),
  ('export_decl -> EXPORT function','export_decl',2,'p_export_decl','js_parse.py',3244),
  ('export_decl -> EXPORT class','export_decl',2,'p_export_decl','js_parse.py',3245),
  ('export_decl -> EXPORT interface','export_decl',2,'p_export_decl','js_parse.py',3246),
  ('export_decl -> EXPORT enum','export_decl',2,'p_export_decl','js_parse.py',3247),
  ('export_decl -> EXPORT DEFAULT function','export_decl',3,'p_export_decl','js_parse.py',3248),
  ('export_decl -> EXPORT DEFAULT enum','export_decl',3,'p_export_decl','js_parse.py',3249),
  ('export_decl -> EXPORT DEFAULT class','export_decl',3,'p_export_decl','js_parse.py',3250),
  ('export_decl -> EXPORT DEFAULT assign','export_decl',3,'p_export_decl','js_parse.py',3251),
  ('export_clause -> LBRACKET RBRACKET','export_clause',2,'p_export_clause','js_parse.py',3331),
  ('export_clause -> LBRACKET exports_list RBRACKET','export_clause',3,'p_export_clause','js_parse.py',3332),
  ('export_clause -> LBRACKET exports_list COMMA RBRACKET','export_clause',4,'p_export_clause','js_parse.py',3333),
  ('exports_list -> export_spec','exports_list',1,'p_exports_list','js_parse.py',3342),
  ('exports_list -> exports_list COMMA export_spec','exports_list',3,'p_exports_list','js_parse.py',3343),
  ('export_spec -> ID','export_spec',1,'p_export_spec','js_parse.py',3356),
  ('export_spec -> ID ID ID','export_spec',3,'p_export_spec','js_parse.py',3357),
  ('catch_tok -> CATCH','catch_tok',1,'p_catch_tok','js_parse.py',3369),
  ('catch -> catch_tok paren_expr statement_nonctrl','catch',3,'p_catch','js_parse.py',3378),
  ('catch -> catch_tok paren_expr LBRACKET statementlist RBRACKET','catch',5,'p_catch','js_parse.py',3379),
  ('else -> ELSE ctrl_statement','else',2,'p_else','js_parse.py',3391),
  ('break -> BREAK','break',1,'p_break','js_parse.py',3399),
  ('break -> BREAK ID','break',2,'p_break','js_parse.py',3400),
  ('continue -> CONTINUE','continue',1,'p_continue','js_parse.py',3410),
  ('continue -> CONTINUE ID','continue',2,'p_continue','js_parse.py',3411),
  ('return -> RETURN expr','return',2,'p_return','js_parse.py',3421),
  ('return -> RETURN','return',1,'p_return','js_parse.py',3422),
  ('yield -> YIELD expr','yield',2,'p_yield','js_parse.py',3432),
  ('yield -> YIELD','yield',1,'p_yield','js_parse.py',3433),
  ('id_no_enum -> ID','id_no_enum',1,'p_id_no_enum','js_parse.py',3442),
  ('id_no_enum -> GET','id_no_enum',1,'p_id_no_enum','js_parse.py',3443),
  ('id_no_enum -> SET','id_no_enum',1,'p_id_no_enum','js_parse.py',3444),
  ('id_no_enum -> STATIC','id_no_enum',1,'p_id_no_enum','js_parse.py',3445),
  ('id_no_enum -> CATCH','id_no_enum',1,'p_id_no_enum','js_parse.py',3446),
  ('id_no_enum -> GLOBAL','id_no_enum',1,'p_id_no_enum','js_parse.py',3447),
  ('id_no_enum -> AWAIT','id_no_enum',1,'p_id_no_enum','js_parse.py',3448),
  ('id_no_enum -> FROM','id_no_enum',1,'p_id_no_enum','js_parse.py',3449),
  ('id -> ID','id',1,'p_id','js_parse.py',3458),
  ('id -> GET','id',1,'p_id','js_parse.py',3459),
  ('id -> SET','id',1,'p_id','js_parse.py',3460),
  ('id -> STATIC','id',1,'p_id','js_parse.py',3461),
  ('id -> CATCH','id',1,'p_id','js_parse.py',3462),
  ('id -> GLOBAL','id',1,'p_id','js_parse.py',3463),
  ('id -> CHAR','id',1,'p_id','js_parse.py',3464),
  ('id -> AWAIT','id',1,'p_id','js_parse.py',3465),
  ('id -> FROM','id',1,'p_id','js_parse.py',3466),
  ('id -> ENUM','id',1,'p_id','js_parse.py',3467),
  ('error_push -> <empty>','error_push',0,'p_error_push','js_parse.py',3838),
  ('error_pop -> <empty>','error_pop',0,'p_error_pop','js_parse.py',3844),
]
